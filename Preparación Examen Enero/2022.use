model Bancos

class Banco
end

class Sucursal < Empresa
operations
abrirCuentaDeCredito(p:Propietario):CuentaDeCredito
begin
    declare c:CuentaDeCredito;
    c:=new CuentaDeCredito();
    insert(self,c) into Propiedad;
    insert(p,c) into Cuentas;
    result:= c;
end

abrirCuentaNormal(p:Propietario):CuentaNormal
begin
    declare c:CuentaNormal;
    c:=new CuentaNormal();
    insert(self,c) into Propiedad;
    insert(p,c) into Cuentas;
    result:=c;
end

cambioLimite(c:CuentaDeCredito,nuevoLimite:Real):Boolean
begin
declare autorizado:Boolean;
    result:=false;
    autorizado := if self.responsable->isEmpty() then
                    self.autorizarCambioLimite(c,nuevoLimite)
                else
                    self.responsable.autorizarCambioLimite(c,nuevoLimite)
                endif;
    if autorizado then
        c.limite:=nuevoLimite;
        result:=true;
    end
end
pre CuentaSubordinada: c.sucursal=self

autorizarCambioLimite(c:CuentaDeCredito,nuevoLimite:Real):Boolean =
    (nuevoLimite <= c.limite) or
    ((c.limite*1.1 <= nuevoLimite) and (c.saldo >= nuevoLimite))
end -- class Sucursal

composition Sucursales between
    Banco [1]
    Sucursal [1..*]
end

association Jerarquia between
    Sucursal [0..1] role responsable
    Sucursal [*] role subordinada
end

class Ciudad
end

association Situacion between
    Sucursal [*]
    Ciudad [1]
end

abstract class Cuenta
attributes
saldo:Real init:0.0
operations
    conocerSaldo():Real = self.saldo
    
    ingresar(r:Real)
    begin
    self.saldo:=self.saldo+r
    end
    pre IngresoPositivo: r>=0
    post IngresoOk: saldo = saldo@pre + r

    retiradaEfectivo(r:Real)
    begin
    self.saldo:=self.saldo-r
    end
    pre IngresoPositivo: r>=0 -- en las subclases se comprueban los limites superiores
    post ExtraccionOk: saldo = saldo@pre - r

    transferir(destino:Cuenta,r:Real)
    begin
    declare sucursalOrigen:Sucursal, sucursalDestino:Sucursal,
            comisionOrigen:Real, comisionDestino:Real;
            
    comisionOrigen:=r*0.01; comisionDestino:=r*0.01;
    sucursalOrigen:=self.sucursal; sucursalDestino:=destino.sucursal;
    -- exenciones de comisiones
    if sucursalOrigen.banco=sucursalDestino.banco then -- entre cuentas del mismo banco
        comisionOrigen:=0.0; comisionDestino:=0.0;
        else
        if sucursalOrigen.banco.empresaVIP->includes(self.propietario) -- cliente VIP
            or self.deSucursal<>null -- cuenta de sucursal
        then
            comisionOrigen:=0.0;
        end;
        if sucursalDestino.banco.empresaVIP->includes(destino.propietario) -- cliente VIP
            or destino.deSucursal<>null -- cuenta de sucursal
        then
            comisionDestino:=0.0;
        end;
        sucursalOrigen.miCuenta.ingresar(comisionOrigen);
        sucursalDestino.miCuenta.ingresar(comisionDestino);
        end;

    self.retiradaEfectivo(r);
    destino.ingresar(r-comisionDestino-comisionOrigen);
    end
    pre transferValido: r>=0
    post TransferOk: saldo = saldo@pre - r
end -- class Cuenta

class CuentaNormal < Cuenta
operations
    retiradaEfectivo(r:Real)
    begin
        self.saldo:=self.saldo-r
    end
    pre IngresoPositivo: r>=0 and r <= self.saldo
    post ExtraccionOk: saldo = saldo@pre - r
end

class CuentaDeCredito < Cuenta
attributes
    limite:Real init: 10.0
operations
    retiradaEfectivo(r:Real)
    begin
        self.saldo:=self.saldo-r
    end
    pre IngresoPositivo: r>=0 and r <= self.saldo + self.limite
    post ExtraccionOk: saldo = saldo@pre - r
    end

abstract class Propietario
end

class Persona < Propietario
end

class Empresa < Propietario
end

association VIPs between
    Banco [*] role bancoVIP
    Empresa [*] role empresaVIP derive = Empresa.allInstances()->select(e|e.cuenta->
                                        exists(c|c.saldo>=1000000 and c.sucursal.banco=self))
end

association Cuentas between
    Propietario [1]
    Cuenta [*]
end

association CuentaDeSucursal between
    Sucursal [0..1] role deSucursal
    Cuenta [1] role miCuenta
end

association Propiedad between
    Sucursal [1] role sucursal
    Cuenta [1..*] role cuentas
end

class Calendario
operations
    pasaUnAnio()
    begin
        for s in self.banco.sucursal do
            for c in s.cuentas->excluding(s.miCuenta) do
                if not c.sucursal.banco.empresaVIP->includes(c.propietario) then -- ventaja VIP
                    if c.saldo>=0 then
                        c.transferir(s.miCuenta,c.saldo*0.01)
                    else
                        c.transferir(s.miCuenta,c.oclAsType(CuentaDeCredito).limite*0.01)
                    end
                end
            end
        end
    end
end -- class Calendario

constraints
context Banco 
inv TresSucursalesDelMismoBanco: self.sucursal.ciudad->forAll(c|c.sucursal->select(banco=self)->size()<=3)

context CuentaNormal 
inv SaldoPositivo: self.saldo >= 0

context CuentaDeCredito 
inv SaldoPositivoCred: self.saldo + self.limite >= 0

context Sucursal 
inv MiCuentaEsMia: self.cuentas->includes(miCuenta)

context Sucursal 
inv JerarquiaOk: self.subordinada->closure(subordinada)->excludes(self)

context Sucursal 
inv JerarquiaOkBancos: self.subordinada->forAll(s1,s2|s1.banco=s2.banco)
